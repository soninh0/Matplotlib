import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 1) Criar DataFrame com os dados

dados = {
    "Data": ["15/01/2025"] * 5,
    "Cidade": ["São Paulo", "Rio de Janeiro", "Curitiba", "Porto Alegre", "Salvador"],
    "Temperatura Máxima (°C)": [30.5, 35.0, 24.0, 28.0, 31.0],
    "Temperatura Mínima (°C)": [22.0, 25.0, 18.0, 20.0, 24.5],
    "Precipitação (mm)": [12.0, np.nan, 8.0, 15.0, np.nan],
    "Umidade Relativa (%)": [78, 70, np.nan, 82, 80]
}

df = pd.DataFrame(dados)

# Substituir valores ausentes na Precipitação pela média
df["Precipitação (mm)"].fillna(df["Precipitação (mm)"].mean(), inplace=True)

# Substituir valores ausentes na Umidade Relativa pela mediana
df["Umidade Relativa (%)"].fillna(df["Umidade Relativa (%)"].median(), inplace=True)

# Adicionar a coluna Amplitude Térmica
df["Amplitude Térmica"] = df["Temperatura Máxima (°C)"] - df["Temperatura Mínima (°C)"]

# Criar um novo DataFrame com cidades com Temperatura Máxima acima de 30°C
df_filtrado = df[df["Temperatura Máxima (°C)"] > 30]

# Reordenar as colunas
df = df[["Data", "Cidade", "Temperatura Máxima (°C)", "Temperatura Mínima (°C)", "Amplitude Térmica", "Precipitação (mm)", "Umidade Relativa (%)"]]

print("DataFrame Final:")
print(df)

# 2) Gráfico de linha da evolução da temperatura ao longo do dia

horas = list(range(25))
temperaturas = [15 + (x * 1.25) if x <= 12 else 30 - ((x - 12) * 1) for x in horas]

plt.figure(figsize=(10, 5))
plt.plot(horas, temperaturas, marker='o', linestyle='-', color='b', label='Temperatura')
plt.xlabel("Horário (h)")
plt.ylabel("Temperatura (°C)")
plt.title("Evolução da Temperatura Durante o Dia")
plt.grid(True)
plt.legend()
plt.show()

# 3) Análise de vendas usando Seaborn

dados_vendas = {
    "Dia": ["Seg", "Ter", "Qua", "Qui", "Sex", "Sáb", "Dom"],
    "Vendas": [1500, 1800, 2000, 2200, 2500, 3000, 3200],
    "Clientes": [100, 120, 130, 140, 160, 200, 210],
    "Lucro": [300, 400, 450, 500, 600, 750, 800]
}

df_vendas = pd.DataFrame(dados_vendas)

# Gráfico de barras - Total de vendas por dia
plt.figure(figsize=(8, 5))
sns.barplot(x="Dia", y="Vendas", data=df_vendas, palette="viridis")
plt.title("Total de Vendas por Dia")
plt.xlabel("Dia da Semana")
plt.ylabel("Vendas")
plt.show()

# Gráfico de dispersão - Relação entre número de clientes e total de vendas
plt.figure(figsize=(8, 5))
sns.scatterplot(x="Clientes", y="Vendas", data=df_vendas, color='r')
plt.title("Relação entre Número de Clientes e Total de Vendas")
plt.xlabel("Número de Clientes")
plt.ylabel("Total de Vendas")
plt.show()

# Heatmap - Correlação entre variáveis
plt.figure(figsize=(8, 5))
sns.heatmap(df_vendas.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlação entre Vendas, Clientes e Lucro")
plt.show()

# 4) Série temporal da temperatura em Dinosaur, CO

data_url = "https://www.ncei.noaa.gov/pub/data/uscrn/products/hourly02/"

datas = pd.date_range(start="2025-01-01", periods=30, freq='D')
temp_max = np.random.uniform(25, 35, len(datas))
temp_min = np.random.uniform(15, 25, len(datas))

df_temperaturas = pd.DataFrame({
    "Data": datas,
    "Temperatura Máxima (°C)": temp_max,
    "Temperatura Mínima (°C)": temp_min
})

fig, ax = plt.subplots(figsize=(12, 6), constrained_layout=True)
ax.set_facecolor('0.8')
ax.plot(df_temperaturas["Data"], df_temperaturas["Temperatura Máxima (°C)"], label="Temp. Máxima", marker='o')
ax.plot(df_temperaturas["Data"], df_temperaturas["Temperatura Mínima (°C)"], label="Temp. Mínima", marker='s')
ax.set_xlabel("Data")
ax.set_ylabel("Temperatura (°C)")
ax.set_title("Variação da Temperatura em Dinosaur, CO")
ax.legend()
ax.grid(True)
ax.set_xticklabels(df_temperaturas["Data"].dt.strftime('%d-%m'), rotation=45)
ax.annotate(f'Source: {data_url}', xy=(0.02, 0.02), xycoords='figure fraction', fontsize='x-small', color='black')
plt.show()
